  # labels = [label for label in tested_values]
                
                # # Plotting
                # fig, ax = plt.subplots()
                # arrowprops=dict(arrowstyle="->", mutation_scale=15, lw=1, color='b', alpha=0.7)
                # ax.scatter(our_fpr, our_tpr, label='Nasz algorytm', marker='o', color='blue')
                # for i, label in enumerate(labels):
                #     random_direction =  np.random.rand() * 2 * np.pi
                #    # ax.annotate(label, (our_fpr[i], our_tpr[i]), xytext=(our_fpr[i]+0.05, our_tpr[i]+0.05), arrowprops=dict(arrowstyle="->"))
                #     ax.annotate(label, (our_fpr[i], our_tpr[i]), xytext=(our_fpr[i]+0.05, our_tpr[i]+0.05), arrowprops=dict(arrowstyle="->", mutation_scale=15, lw=1, color='b', alpha=0.7, connectionstyle="arc3,rad={}".format(np.arctan2(*random_direction))))


                # ax.scatter(comparison_fpr, comparison_tpr, label='Algorytm porównawczy (sklearn)', marker='s', color='red')
                # for i, label in enumerate(labels):
                #     random_direction = np.random.rand(2)
                #     ax.annotate(label, (comparison_fpr[i], comparison_tpr[i]), xytext=(comparison_fpr[i]+0.05, comparison_tpr[i]+0.05), arrowprops=dict(arrowstyle="->", mutation_scale=15, lw=1, color='b', alpha=0.7, connectionstyle="arc3,rad={}".format(np.arctan2(*random_direction))))
                #     #ax.annotate(label, (comparison_fpr[i], comparison_tpr[i]), xytext=(comparison_fpr[i]+0.05, comparison_tpr[i]+0.05), arrowprops=dict(arrowstyle="->"))

                # # ax.scatter(our_fpr, our_tpr, label='Nasz algorytm', marker='o', color='blue')
                # # ta.allocate_text(fig, ax, our_fpr, our_tpr,
                # #                 labels,
                # #                 x_scatter=our_fpr, y_scatter=our_tpr,
                # #                 textsize=10,
                # #                 max_distance=2,
                # #                 min_distance=0.25,
                # #                 margin=0.1,
                # #                 linewidth=0.5,
                # #                 nbr_candidates=len(tested_values))

                # # ax.scatter(comparison_fpr, comparison_tpr, label='Algorytm porównawczy (sklearn)', marker='s', color='red')
                # # ta.allocate_text(fig, ax, comparison_fpr, comparison_tpr,
                # #                 labels,
                # #                 x_scatter=comparison_fpr, y_scatter=comparison_tpr,
                # #                 textsize=10,
                # #                 max_distance= 2,
                # #                 min_distance=0.5,
                # #                 margin=0.1,
                # #                 linewidth=0.5,
                # #                 nbr_candidates=len(tested_values))

                # # plt.xlabel('FPR')
                # # plt.ylabel('TPR')
                # # plt.title(f'Krzywa ROC dla zmiany parametru: {test_parameter}')
                # # plt.legend()

                # # Saving and showing the plot
                # plt.savefig(f'src/Quality_tool/Measures/{test_name}/{test_parameter}/ROC.png')
                # plt.show()
                # plt.close()
                